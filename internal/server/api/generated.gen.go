// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CreateSubscriptionRequest defines model for CreateSubscriptionRequest.
type CreateSubscriptionRequest struct {
	// EndDate Дата окончания подписки в формате MM-YYYY
	EndDate *string `json:"end_date,omitempty"`

	// Price Стоимость месячной подписки в рублях
	Price int `json:"price"`

	// ServiceName Название сервиса
	ServiceName string `json:"service_name"`

	// StartDate Дата начала подписки в формате MM-YYYY
	StartDate string `json:"start_date"`

	// UserId ID пользователя
	UserId openapi_types.UUID `json:"user_id"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// EndDate Дата окончания подписки в формате MM-YYYY
	EndDate *string `json:"end_date,omitempty"`

	// Id Уникальный идентификатор подписки
	Id openapi_types.UUID `json:"id"`

	// Price Стоимость месячной подписки в рублях
	Price int `json:"price"`

	// ServiceName Название сервиса
	ServiceName string `json:"service_name"`

	// StartDate Дата начала подписки в формате MM-YYYY
	StartDate string     `json:"start_date"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// UserId ID пользователя
	UserId openapi_types.UUID `json:"user_id"`
}

// TotalCostResponse defines model for TotalCostResponse.
type TotalCostResponse struct {
	// PeriodEnd Конец периода
	PeriodEnd *string `json:"period_end,omitempty"`

	// PeriodStart Начало периода
	PeriodStart *string `json:"period_start,omitempty"`

	// ServiceName Название сервиса (если применялся фильтр)
	ServiceName *string `json:"service_name,omitempty"`

	// TotalCost Суммарная стоимость подписок за период
	TotalCost *int `json:"total_cost,omitempty"`

	// UserId ID пользователя (если применялся фильтр)
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// UpdateSubscriptionRequest defines model for UpdateSubscriptionRequest.
type UpdateSubscriptionRequest struct {
	// EndDate Дата окончания подписки в формате MM-YYYY
	EndDate *string `json:"end_date,omitempty"`

	// Price Стоимость месячной подписки в рублях
	Price *int `json:"price,omitempty"`

	// ServiceName Название сервиса
	ServiceName *string `json:"service_name,omitempty"`

	// StartDate Дата начала подписки в формате MM-YYYY
	StartDate *string `json:"start_date,omitempty"`

	// UserId ID пользователя
	UserId *openapi_types.UUID `json:"user_id,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// GetSubscriptionsTotalCostParams defines parameters for GetSubscriptionsTotalCost.
type GetSubscriptionsTotalCostParams struct {
	// StartDate Дата начала периода в формате MM-YYYY
	StartDate string `form:"start_date" json:"start_date"`

	// EndDate Дата окончания периода в формате MM-YYYY
	EndDate string `form:"end_date" json:"end_date"`

	// UserId Фильтр по ID пользователя
	UserId *openapi_types.UUID `form:"user_id,omitempty" json:"user_id,omitempty"`

	// ServiceName Фильтр по названию сервиса
	ServiceName *string `form:"service_name,omitempty" json:"service_name,omitempty"`
}

// PostSubscriptionsJSONRequestBody defines body for PostSubscriptions for application/json ContentType.
type PostSubscriptionsJSONRequestBody = CreateSubscriptionRequest

// PutSubscriptionsIdJSONRequestBody defines body for PutSubscriptionsId for application/json ContentType.
type PutSubscriptionsIdJSONRequestBody = UpdateSubscriptionRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список подписок
	// (GET /subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request)
	// Создать новую подписку
	// (POST /subscriptions)
	PostSubscriptions(w http.ResponseWriter, r *http.Request)
	// Подсчет суммарной стоимости подписок
	// (GET /subscriptions/total-cost)
	GetSubscriptionsTotalCost(w http.ResponseWriter, r *http.Request, params GetSubscriptionsTotalCostParams)
	// Удалить подписку
	// (DELETE /subscriptions/{id})
	DeleteSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Получить подписку по ID
	// (GET /subscriptions/{id})
	GetSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Обновить подписку
	// (PUT /subscriptions/{id})
	PutSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получить список подписок
// (GET /subscriptions)
func (_ Unimplemented) GetSubscriptions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создать новую подписку
// (POST /subscriptions)
func (_ Unimplemented) PostSubscriptions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Подсчет суммарной стоимости подписок
// (GET /subscriptions/total-cost)
func (_ Unimplemented) GetSubscriptionsTotalCost(w http.ResponseWriter, r *http.Request, params GetSubscriptionsTotalCostParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удалить подписку
// (DELETE /subscriptions/{id})
func (_ Unimplemented) DeleteSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить подписку по ID
// (GET /subscriptions/{id})
func (_ Unimplemented) GetSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновить подписку
// (PUT /subscriptions/{id})
func (_ Unimplemented) PutSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) PostSubscriptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSubscriptions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubscriptionsTotalCost operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsTotalCost(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsTotalCostParams

	// ------------- Required query parameter "start_date" -------------

	if paramValue := r.URL.Query().Get("start_date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start_date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_date", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_date", Err: err})
		return
	}

	// ------------- Required query parameter "end_date" -------------

	if paramValue := r.URL.Query().Get("end_date"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end_date"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_date", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_date", Err: err})
		return
	}

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Optional query parameter "service_name" -------------

	err = runtime.BindQueryParameter("form", true, false, "service_name", r.URL.Query(), &params.ServiceName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "service_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsTotalCost(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteSubscriptionsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscriptionsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscriptionsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSubscriptionsId operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptionsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutSubscriptionsId operation middleware
func (siw *ServerInterfaceWrapper) PutSubscriptionsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutSubscriptionsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions", wrapper.GetSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/subscriptions", wrapper.PostSubscriptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/total-cost", wrapper.GetSubscriptionsTotalCost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/subscriptions/{id}", wrapper.DeleteSubscriptionsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscriptions/{id}", wrapper.GetSubscriptionsId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/subscriptions/{id}", wrapper.PutSubscriptionsId)
	})

	return r
}

type BadRequestJSONResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

type InternalServerErrorJSONResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

type NotFoundJSONResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

type GetSubscriptionsRequestObject struct {
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetSubscriptions500JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptionsRequestObject struct {
	Body *PostSubscriptionsJSONRequestBody
}

type PostSubscriptionsResponseObject interface {
	VisitPostSubscriptionsResponse(w http.ResponseWriter) error
}

type PostSubscriptions201JSONResponse Subscription

func (response PostSubscriptions201JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptions400JSONResponse struct{ BadRequestJSONResponse }

func (response PostSubscriptions400JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostSubscriptions500JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCostRequestObject struct {
	Params GetSubscriptionsTotalCostParams
}

type GetSubscriptionsTotalCostResponseObject interface {
	VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error
}

type GetSubscriptionsTotalCost200JSONResponse TotalCostResponse

func (response GetSubscriptionsTotalCost200JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCost400JSONResponse struct{ BadRequestJSONResponse }

func (response GetSubscriptionsTotalCost400JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCost500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetSubscriptionsTotalCost500JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteSubscriptionsIdResponseObject interface {
	VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error
}

type DeleteSubscriptionsId204Response struct {
}

func (response DeleteSubscriptionsId204Response) VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSubscriptionsId404JSONResponse struct{ NotFoundJSONResponse }

func (response DeleteSubscriptionsId404JSONResponse) VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionsId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteSubscriptionsId500JSONResponse) VisitDeleteSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetSubscriptionsIdResponseObject interface {
	VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error
}

type GetSubscriptionsId200JSONResponse Subscription

func (response GetSubscriptionsId200JSONResponse) VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsId404JSONResponse struct{ NotFoundJSONResponse }

func (response GetSubscriptionsId404JSONResponse) VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetSubscriptionsId500JSONResponse) VisitGetSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutSubscriptionsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutSubscriptionsIdJSONRequestBody
}

type PutSubscriptionsIdResponseObject interface {
	VisitPutSubscriptionsIdResponse(w http.ResponseWriter) error
}

type PutSubscriptionsId200JSONResponse Subscription

func (response PutSubscriptionsId200JSONResponse) VisitPutSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutSubscriptionsId400JSONResponse struct{ BadRequestJSONResponse }

func (response PutSubscriptionsId400JSONResponse) VisitPutSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutSubscriptionsId404JSONResponse struct{ NotFoundJSONResponse }

func (response PutSubscriptionsId404JSONResponse) VisitPutSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutSubscriptionsId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PutSubscriptionsId500JSONResponse) VisitPutSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получить список подписок
	// (GET /subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Создать новую подписку
	// (POST /subscriptions)
	PostSubscriptions(ctx context.Context, request PostSubscriptionsRequestObject) (PostSubscriptionsResponseObject, error)
	// Подсчет суммарной стоимости подписок
	// (GET /subscriptions/total-cost)
	GetSubscriptionsTotalCost(ctx context.Context, request GetSubscriptionsTotalCostRequestObject) (GetSubscriptionsTotalCostResponseObject, error)
	// Удалить подписку
	// (DELETE /subscriptions/{id})
	DeleteSubscriptionsId(ctx context.Context, request DeleteSubscriptionsIdRequestObject) (DeleteSubscriptionsIdResponseObject, error)
	// Получить подписку по ID
	// (GET /subscriptions/{id})
	GetSubscriptionsId(ctx context.Context, request GetSubscriptionsIdRequestObject) (GetSubscriptionsIdResponseObject, error)
	// Обновить подписку
	// (PUT /subscriptions/{id})
	PutSubscriptionsId(ctx context.Context, request PutSubscriptionsIdRequestObject) (PutSubscriptionsIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request) {
	var request GetSubscriptionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSubscriptions operation middleware
func (sh *strictHandler) PostSubscriptions(w http.ResponseWriter, r *http.Request) {
	var request PostSubscriptionsRequestObject

	var body PostSubscriptionsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSubscriptions(ctx, request.(PostSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSubscriptionsResponseObject); ok {
		if err := validResponse.VisitPostSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptionsTotalCost operation middleware
func (sh *strictHandler) GetSubscriptionsTotalCost(w http.ResponseWriter, r *http.Request, params GetSubscriptionsTotalCostParams) {
	var request GetSubscriptionsTotalCostRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptionsTotalCost(ctx, request.(GetSubscriptionsTotalCostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptionsTotalCost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsTotalCostResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsTotalCostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscriptionsId operation middleware
func (sh *strictHandler) DeleteSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteSubscriptionsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscriptionsId(ctx, request.(DeleteSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscriptionsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionsIdResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptionsId operation middleware
func (sh *strictHandler) GetSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetSubscriptionsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptionsId(ctx, request.(GetSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptionsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsIdResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutSubscriptionsId operation middleware
func (sh *strictHandler) PutSubscriptionsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request PutSubscriptionsIdRequestObject

	request.Id = id

	var body PutSubscriptionsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutSubscriptionsId(ctx, request.(PutSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutSubscriptionsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutSubscriptionsIdResponseObject); ok {
		if err := validResponse.VisitPutSubscriptionsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9kQb9p1Gbbb2TwAAAP//ZpMLD9ogAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
